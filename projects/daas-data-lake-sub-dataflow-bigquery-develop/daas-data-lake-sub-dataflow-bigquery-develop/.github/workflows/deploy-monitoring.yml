# Creating monitoring dashboards and alerts for Datalake clients.
# Once succeded, Terraform provides and handles the infrastructure (IaC).
# Can be triggered either once or continuously within CI/CD pipeline. 
# Triggered manually:
#   workflow_dispatch -> select branch
# Workflow:
#   - Set up environment
#   - Deploy monitoring with Terraform

name: Manual - Create monitoring with Terraform

on:
  push:
    branches:
      - main
      - develop
    paths:
      - terraform/monitoring/**
  workflow_dispatch:

env:
  TF_PLAN_FILE: terraform.tfplan

defaults:
  run:
    working-directory: terraform/monitoring

permissions:
  contents: read
  id-token: write

jobs:
  prepare:
    name: Prerequisites
    runs-on: ubuntu-latest

    steps:
      # Checkout the head commit in a detached head state.
      - name: Checkout the latest commit
        uses: actions/checkout@v2

      - name: Check branch and set environment
        id: check_branch
        run: |
          echo "Running on branch ${{ github.ref }}"
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo '::set-output name=env_name::production'
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo '::set-output name=env_name::develop'
          fi

    outputs:
      env_name: ${{ steps.check_branch.outputs.env_name }}

  deploy:
    name: Deploy Cloud Monitoring with Terraform
    runs-on: ubuntu-latest
    needs: prepare
    environment:
      name: ${{ needs.prepare.outputs.env_name }}
    env:
      TF_VAR_project: ${{ secrets.GOOGLE_PROJECT_ID }}
      TF_VAR_slack: "{\"notification_channel\":\"${{ secrets.SLACK_CHANNEL }}\",\"auth_token\":\"${{ secrets.SLACK_AUTH_TOKEN }}\"}"
      TF_VAR_opsgenie_token: ${{ secrets.OPSGENIE_TOKEN }}
      TF_VAR_github_private_access_token: ${{ secrets.PRIVATE_ACCESS_TOKEN }}

    steps:
      - name: Checkout the latest commit
        uses: actions/checkout@v2

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v0
        with:
          token_format: access_token
          workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
          cache: pip

      - name: Install Python dependencies
        working-directory: scripts
        run: pip install -r requirements.txt

      - name: Generate .tfvars from the client config
        working-directory: scripts
        run: |
          python get_contact.py ../conf

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false

      - name: Terraform init
        run: terraform init -backend-config=bucket=${{ secrets.GOOGLE_PROJECT_ID }}-state

      - name: Terraform validate
        run: terraform validate

      - name: Terraform plan
        run: terraform plan -out ${{ env.TF_PLAN_FILE }}

      - name: Terraform apply
        run: terraform apply ${{ env.TF_PLAN_FILE }}
